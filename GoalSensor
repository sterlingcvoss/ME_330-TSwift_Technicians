/*
 * File:   Lab_7.c
 * Author: svoss
 *
 * Created on October 24, 2017, 8:58 AM
 */

//This lab is for IR detection

#include "xc.h"

//This code will set up the A/D conversion for the IR corner sensor (pin 8)

void config_ad()
{

	/*** Configure Desired Port Pins as Analog Inputs ***/
	_TRISA3 = 1;		// TRISA/B, pg. 45 datasheet
	_ANSA3 = 1;			// ANSA/B, pg. 136-137
    

	/*** Select Voltage Reference Source ***/
	// use AVdd for positive reference
	_PVCFG = 00;		// AD1CON2<15:14>, pg. 212-213 datasheet
	// use AVss for negative reference
	_NVCFG = 0;			// AD1CON2<13>


	/*** Select Analog Conversion Clock Rate ***/
	// make sure Tad is at least 600ns, see Table 29-41 datasheet
	_ADCS = 00000000;	// AD1CON3<7:0>, pg. 213 datasheet


	/*** Select Sample/Conversion Sequence ***/
	// use auto-convert
	_SSRC = 0b0111;		// AD1CON1<7:4>, pg. 211 datasheet
	// use auto-sample
	_ASAM = 1;			// AD1CON1<2>
	// choose a sample time >= 1 Tad, see Table 29-41 datasheet
	_SAMC = 00001;		// AD1CON3<12:8>


	/*** Choose Analog Channels to be Used ***/
	// scan inputs
    _CSCNA = 1;			// AD1CON2<10>
	// choose which channels to scan, e.g. for ch AN12, set _CSS12 = 1;
	_CSS14 = 1;			// AD1CSSH/L, pg. 217
   

	/*** Select How Results are Presented in Buffer ***/
	// set 12-bit resolution
	_MODE12 = 1;		// AD1CON1<10>
	// use absolute decimal format
	_FORM = 00;			// AD1CON1<9:8>
	// load results into buffer determined by converted channel, e.g. ch AN12 
    // results appear in ADC1BUF12
	_BUFREGEN = 1;		// AD1CON2<11>


	/*** Select Interrupt Rate ***/
	// interrupt rate should reflect number of analog channels used, e.g. if 
    // 5 channels, interrupt every 5th sample
	_SMPI = 00000;		// AD1CON2<6:2> Change it according to # of channels


	/*** Turn on A/D Module ***/
	_ADON = 1;			// AD1CON1<15>
}

int main(void) {
    
    _TRISB8=0;  //Set Desired pin as output
    
    config_ad();    //Call A/D function
    
    while(1)
    {
       if (((3.3/4096.0)*ADC1BUF4) > 2) //If voltage stored in Buffer is higher than desired threshold
       {
           _LATB8 = 1;  //Set desired pin high
       }
       else
       {
           _LATB8 = 0;  //If not, set it low
       }
    }
    
    return 0;
}
